package com.sky.controller.admin;import com.sky.dto.CategoryDTO;import com.sky.dto.CategoryPageQueryDTO;import com.sky.entity.Category;import com.sky.result.PageResult;import com.sky.result.Result;import com.sky.service.impl.CategoryServiceImpl;import io.swagger.annotations.Api;import io.swagger.annotations.ApiOperation;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.*;import java.util.List;/** * 分类管理入口类 * * @author zengzhicheng */@Slf4j@Api("分类相关接口")@RestController@RequestMapping("/admin/category")public class CategoryController {    @Autowired    private CategoryServiceImpl categoryService;    /**     * 新增分类     *     * @param categoryDTO 新增分类的数据     * @return 返回响应     */    @ApiOperation("新增分类")    @PostMapping    public Result<String> save(@RequestBody CategoryDTO categoryDTO) {        log.info("新增分类:{}", categoryDTO);        categoryService.save(categoryDTO);        return Result.success();    }    /**     * 分类分页查询     *     * @param categoryPageQueryDTO 分页查询参数     * @return 返回分页查询结果     */    @ApiOperation("分类分页查询")    @GetMapping("/page")    public Result<PageResult> pageQuery(CategoryPageQueryDTO categoryPageQueryDTO){        log.info("分页查询参数：{}", categoryPageQueryDTO);        PageResult pageResult = categoryService.pageQuery(categoryPageQueryDTO);        return Result.success(pageResult);    }    /**     * 根据分类查询     *     * @param type 根据类型查询参数     * @return 返回分页查询结果     */    @ApiOperation("根据类型查询分类")    @GetMapping("/list")    public Result<List<Category>> listQuery(String type) {        log.info("根据分类查询：{}", type);       List<Category> list = categoryService.listQuery(type);        return Result.success(list);    }    /**     * 修改分类     *     * @param categoryDTO 修改分类的信息     * @return 返回响应结果     */    @ApiOperation("修改分类")    @PutMapping    public Result<String> update(@RequestBody CategoryDTO categoryDTO) {        log.info("修改分类：{}", categoryDTO);        categoryService.update(categoryDTO);        return Result.success();    }    /**     * 启用或禁用分类     *     * @param id 分类Id     * @param status 分类状态     * @return 返回响应数据     */    @ApiOperation("启动或者停止分类")    @PostMapping("/status/{status}")    public Result<String> startOrStop(@PathVariable String status, Long id) {        log.info("启动或停止分类为:{}的状态为:{}",id,status);        categoryService.startOrStop(id, status);        return Result.success();    }    /**     * 根据id 删除分类     *     * @param id 分类id     * @return 响应结果     */    @ApiOperation("删除分类")    @DeleteMapping    public Result<String> delete(String id) {        log.info("要删除的id : {}" , id);        categoryService.delete(id);        return Result.success();    }}